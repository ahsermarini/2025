# First steps: 

# Setting up the working directory 
setwd("C:/Users/Serma/OneDrive/Desktop/Spatial/invasive_usa")

install.packages("terra")
install.packages("tidyterra")
install.packages("dplyr")
install.packages("geodata")
install.packages("predicts")
install.packages("raster")
install.packages("ggplot2")
install.packages("maps")

#Accessing all required packages 

library(terra)         # Tools for spatial data manipulation (raster/vector)
library(tidyterra)     # Integrates 'terra' with 'tidyverse' for tidy data workflows
library(dplyr)         # Tidyverse package for data manipulation
library(geodata)       # Access and download geospatial/climate data
library(predicts)      # Spatial predictive modeling, e.g., species distribution
library(raster)        # Spatial raster data analysis and modeling
library(ggplot2)       # Data visualization with customizable plots
library(maps)          # World map data for geographic visualization

## loading the dataset
gbif_data <- read.csv("C:/Users/Serma/OneDrive/Desktop/Spatial/invasive_usa/invasive_usa.csv")

# View the structure of the dataset
str(gbif_data)

# view first few rows of the dataset
head(gbif_data)

# Taxon key for TC
species_key <- 2874696

# Filter data for TC
species_data <- gbif_data %>% filter(taxonKey == species_key)

# keeping the columns of interest
columns_to_keep <- c("scientificName", "decimalLatitude", "decimalLongitude", "occurrenceStatus", "speciesKey", "order", 
                     "family", "species", "genus", "infraspecificEpithet", "year", "month", 
                     "license", "countryCode", "locality", "collectionCode", "basisOfRecord", "individualCount", "taxonKey")
columns_to_keep <- columns_to_keep[columns_to_keep %in% colnames(gbif_data)] 
invasivesp_data <- gbif_data[,columns_to_keep]

# removing records without coordinates
# Convert decimalLongitude and decimalLatitude to numeric
invasivesp_data$decimalLongitude <- as.numeric(as.character(invasivesp_data$decimalLongitude))
invasivesp_data$decimalLatitude <- as.numeric(as.character(invasivesp_data$decimalLatitude))
invasivesp_data <- invasivesp_data %>%  filter(!is.na(decimalLongitude)) %>%  filter(!is.na(decimalLatitude))

# remove unsuitable data sources, and keep only those listed here
keeping_record <- c("LIVING_SPECIMEN", "HUMAN_OBSERVATION", "PRESERVED_SPECIMEN")
invasivesp_data <- invasivesp_data[invasivesp_data$basisOfRecord %in% keeping_record, ]

# rename latitude and longitude columns
invasivesp_data <- invasivesp_data %>% rename("LAT"=decimalLatitude, "LONG"=decimalLongitude)

write.csv(invasivesp_data, 
          file="occurrence_data_cleaned.csv", 
          row.names = FALSE)

## Downloading present & future bioclimatic variable data 
bioclim_data <- worldclim_global(var = "bio",
                                 res = 5,
                                 path = "data/")

# Download predicted climate data

forecast_data <- cmip6_world(model = "MPI-ESM1-2-HR",
                             ssp = "585",
                             time = "2061-2080",
                             var = "bioc",
                             res = 5,
                             path = "data")

# Determine geographic extent of our data
max_lat <- ceiling(max(invasivesp_data$LAT))
min_lat <- floor(min(invasivesp_data$LAT))
max_lon <- ceiling(max(invasivesp_data$LONG))
min_lon <- floor(min(invasivesp_data$LONG))

# Store boundaries in a single extent object
geographic_extent <- ext(x = c(min_lon, max_lon, min_lat, max_lat))

## Plotting occurrences on map 

# Downloading data with geodata's world function to use for our base map
world_map <- world(resolution = 3,
                   path = "data/")

# Cropping the map to our area of interest
my_map <- crop(x = world_map, y = geographic_extent)

# Plotting the base map for Tamarix chinensis
plot(my_map,
     axes = TRUE, 
     col = "grey95",
     main = "Occurrence of Tamarix chinensis")

# Adding the points for individual observations 
points(x = invasivesp_data$LONG, 
       y = invasivesp_data$LAT, 
       col = "olivedrab", 
       pch = 20, 
       cex = 0.80)

# Make an extent that is 25% larger
sample_extent <- geographic_extent * 1.25

# Crop bioclim data to desired extent
bioclim_data <- crop(x = bioclim_data, y = sample_extent)

# Setting the seed for the random-number generator to ensure results are similar
set.seed(42)

# Randomly sample points 
background <- spatSample(x = bioclim_data,
                         size = 10000,
                         values = FALSE, # don't need values
                         na.rm = TRUE,   # don't sample from ocean
                         xy = TRUE)      # just need coordinates

# Pulling out coordinate columns, LONG (longitude) first, then LAT (latitude) from our dataset for Tamarix chinesis
presence1 <- invasivesp_data[, c("LONG", "LAT")]
# Add column indicating presence
presence1$pa1 <- 1

# Convert background data to a data frame
absence1 <- as.data.frame(background)
# Update column names so they match presence points
colnames(absence1) <- c("LONG", "LAT")
# Add column indicating absence
absence1$pa1 <- 0

# Joining data into single data frame
all_points1 <- rbind(presence1, absence1)

# Extracting climate data for all those points
bioclim_extract1 <- extract(x = bioclim_data,
                            y = all_points1[, c("LONG", "LAT")],
                            ID = FALSE) 

# Adding the point and climate datasets together
points_climate1 <- cbind(all_points1, bioclim_extract1)

# Identifying columns that are latitude & longitude
drop_cols1 <- which(colnames(points_climate1) %in% c("LONG", "LAT"))

# Removing the geographic coordinates from the data frame
points_climate1 <- points_climate1[, -drop_cols1]

## Training & Testing data
# Creating vector indicating fold to separate training and testing data
fold1 <- folds(x = points_climate1,
               k = 5,
               by = points_climate1$pa1)

# Separating data into training and testing sets
testing1 <- points_climate1[fold1 == 1, ]
training1 <- points_climate1[fold1 != 1, ]

# Model Builiding
# Building a model using training data
glm_model1 <- glm(pa1~., data = training1, family = binomial())

# Getting predicted values from the model
glm_predict1 <- predict(bioclim_data, glm_model1, type = "response")

# Print predicted values 
plot(glm_predict1)

# Use testing data for model evaluation
glm_eval1 <- pa_evaluate(p = testing1[testing1$pa1 == 1, ],
                         a = testing1[testing1$pa1 == 0, ],
                         model = glm_model1,
                         type = "response")

# Determining minimum threshold for "presence"
glm_threshold1 <- glm_eval1@thresholds$max_spec_sens

# Plotting the results
# Plotting base map
plot(my_map, 
     axes = TRUE, 
     col = "grey95",
     main= "")

# Only plotting areas where probability of occurrence is greater than the threshold
plot(glm_predict1 > glm_threshold1, 
     add = TRUE, 
     legend = FALSE, 
     col = c(NA, "olivedrab")) 

# Adding observations
points(x = species_1_data$LONG, 
       y = species_1_data$LAT, 
       col = "black",
       pch = 20, 
       cex = 0.20)

# Redrawing country borders
plot(my_map, add = TRUE, border = "grey5")
